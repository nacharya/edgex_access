#!/usr/bin/env python
""" s3edgex : a command line to access stores that use the s3 protocol
        e.g. AWS S3, NexentaEdge S3, Minio S3 etc
"""
import platform
import getopt
import sys
import asyncio
import random
import os
from os.path import expanduser

import aiofiles
import aiobotocore

import logzero
from logzero import logger
from logzero import logging

from edgex_access import EdgexHash
from edgex_access import EdgexStore
from edgex_access import EdgexConfig
from edgex_access import EdgexObject
from edgex_access import EdgexMeta
from edgex_access import EdgexAccess

DEBUG_LEVEL = 5
DEFAULT_CONFIG = "/.sp3"

S3EA_LOG = "sp3.log"

SAMPLE_CONFIG = ' \
{ \
	"stores" : [ \
	{ \
		"NAME" : "edgex", \
		"STORE_TYPE" :"S3", \
		"ACCESS" : "", \
		"SECRET" : "", \
		"REGION" : "", \
		"ENDPOINT" : "https://edge.nexenta.com", \
		"TOKEN" : "", \
		"SSL" : "False", \
		"BUCKET" : "", \
		"TAG" : "edgex" \
	}, \
	{ \
		"NAME" : "ix", \
		"STORE_TYPE" :"FS", \
		"TOKEN" : "", \
		"BUCKET" : "/Users/sample.user/Workspace", \
		"TAG" : "ix"  \
	} \
	], \
	"PRIMARY" : "edgex", \
	"SYNCIO" : "QUEUED", \
	"DEBUG" : 5, \
    "DATATEST" : "data/", \
    "META" : "meta/" \
} \
'

async def s3e_setup(cfg, args):
    """ command line to do the basic setup """
    if not args or args is None:
        cfg.show_all()
        return

    subcmd = args[0]
    if subcmd == "create":
        pass
    elif subcmd == "edit":
        pass
    elif subcmd == "show":
        cfg.show_all()
    else:
        logger.info("setup [ show | create | edit <name> <value> ]")

async def s3e_store(cfg, args):
    """ store specific addtion /deletion to the init file """

    if not args or args is None:
        cfg.show_stores()
        return

    subcmd = args[0]
    if subcmd == "add":
        if len(args) < 2:
            logger.info("add <store_name>")
    elif subcmd == "del":
        if len(args) < 2:
            logger.info("add <store_name>")
    elif subcmd == "edit":
        if len(args) < 2:
            logger.info("add <store_name>")
    else:
        logger.info("store [ add | del | edit ] <store_name> ")


async def parse_cmd_1(cfg, args):
    """ parse a single argument command line """
    recursive = False
    local_obj = False
    if args[0] == "-r":
        recursive = True
    elif args[0] == "-l":
        local_obj = True
    else:
        recursive = False
        local_obj = False

    if len(args) > 1:
        if args[1] == "-r":
            recursive = True
        elif args[1] == "-l":
            local_obj = True
        if recursive and not local_obj:
            objname = args[1]
        elif local_obj and not recursive:
            objname = args[1]
        elif recursive and local_obj:
            objname = args[2]
        else: # not recursive and not local_obj
            objname = args[0]
    else:
        objname = args[0]
    try:
        if local_obj:
            store = cfg.get_local_pwd()
        else:
            store = None
        edgex_obj = EdgexObject(cfg, objname, store=store, as_is=local_obj)

        logger.debug(str(edgex_obj.pathname() + "\t" + "-r: " + str(recursive)))
        logger.debug(str(edgex_obj.bucketname() + "\t" + edgex_obj.objname() \
                     + "\t" + edgex_obj.store_type() + "\t" ))

        return recursive, edgex_obj
    except Exception as exp:
        logger.exception(exp)
        sys.exit(-2)


async def parse_cmd_2(cfg, args):
    """ parse a 2 argument command line """
    recursive = False
    local_obj = False
    if args[0] == "-r":
        recursive = True
    elif args[0] == "-l":
        local_obj = True
    else:
        recursive = False
        local_obj = False

    if len(args) > 1:
        if args[1] == "-l":
            local_obj = True
        elif args[1] == "-r":
            recursive = True
        if recursive and not local_obj:
            first_objname = args[1]
            second_objname = args[2]
        elif local_obj and not recursive:
            first_objname = args[1]
            second_objname = args[2]
        elif recursive and local_obj:
            first_objname = args[2]
            second_objname = args[3]
        else: # not recursive and not localObj
            first_objname = args[0]
            second_objname = args[1]
    try:
        first_obj = EdgexObject(cfg, first_objname)
        if local_obj:
            store = cfg.get_local_pwd()
        else:
            store = None
        second_obj = EdgexObject(cfg, second_objname, store=store, \
                                  as_is=local_obj)
        return recursive, [first_obj, second_obj]
    except Exception as exp:
        logger.exception(exp)
        sys.exit(-2)


async def gp_cmd_callback(session, cmd, obj, result):
    """ get/put command callback is a callback which is
        required one after another command is kicked off
    """
    try:
        logger.info(cmd + "\t" + obj.objname())
        logger.info(str("\t" + str(len(result))))
        dest_obj = obj.arg
        dest_obj.databuf = result
        edgex_op = EdgexAccess(dest_obj)
        put_obj = await edgex_op.put(session)
        await cmd_callback('put', dest_obj, put_obj)
    except Exception as exp:
        logger.exception(exp)

async def cmd_callback(cmd, obj, result):
    """ generec callback for all commands """
    if cmd == 'list':
        logger.info(cmd + "\t" + obj.objname())
        logger.info(str("\t" + str(result)))

async def cmd_recursive(cmd, source_obj, session):
    """ recursive command call """
    try:
        tgt_obj = source_obj.arg
        if tgt_obj is not None:
            logger.info(">" + cmd + "\t" + source_obj.pathname() + "\t" \
                        + tgt_obj.store_type() + "\t" + tgt_obj.pathname())
        tgt_childobj = None
        if source_obj.isfolder:
            edgex_op = EdgexAccess(source_obj)
            res = await edgex_op.list(session)
            await cmd_callback('list', source_obj, res)
            for item in res:
                source_childobj = source_obj.addchild(item)
                if tgt_obj is not None:
                    tgt_childobj = tgt_obj.addchild(item)
                    source_childobj.arg = tgt_childobj
                if source_childobj.isfolder:
                    await cmd_recursive(cmd, source_childobj, session)
                else:
                    if tgt_childobj is not None:
                        source_obj.arg = tgt_childobj
                    edgex_op = EdgexAccess(source_childobj)
                    if cmd == 'list':
                        res = await edgex_op.list(session)
                        await cmd_callback(cmd, source_childobj, res)
                    elif cmd == 'exists':
                        res = await edgex_op.exists(session)
                        await cmd_callback(cmd, source_childobj, res)
                    elif cmd == 'info':
                        res = await edgex_op.info(session)
                        await cmd_callback(cmd, source_childobj, res)
                    elif cmd == 'del':
                        res = await edgex_op.delete(session)
                        await cmd_callback(cmd, source_childobj, res)
                    elif cmd == 'get':
                        databuf = await edgex_op.get(session)
                        await gp_cmd_callback(session, 'get', source_childobj,\
                                              databuf)
                    elif cmd == 'put':
                        databuf = await edgex_op.get(session)
                        await gp_cmd_callback(session, 'put', source_childobj,\
                                              databuf)
                    else:
                        raise
        else:
            logger.info(str(">> " + source_obj.pathname()))
    except Exception as exp:
        logger.exception(exp)


async def parse_cmd_gend(cfg, args):
    """ parse command line for data generation """
    local_obj = False
    if args[0] == "-l":
        local_obj = True
    if len(args) > 1:
        start_obj_name = args[1]
    if len(args) < 3:
        print("gend -l <data_dir> <vdb_file>")
        sys.exit(-2)
    vdb_file = args[2]
    try:
        if local_obj:
            store = cfg.get_local_pwd()
        else:
            store = None
        if not start_obj_name.endswith("/"):
            start_obj_name += "/"
        start_obj = EdgexObject(cfg, start_obj_name, store=store, \
                                 as_is=local_obj)
        return start_obj, vdb_file
    except Exception as exp:
        logger.exception(exp)
        sys.exit(-2)

async def s3e_gend(cfg, args, session):
    """ command line to kick off data generation """
    if not args or args is None:
        return
    try:
        start_gend_obj, vdb_file = await parse_cmd_gend(cfg, args)

        # Random data generation is always local
        # It can always be moved remotely using put -r
        if start_gend_obj.store_type() != "FS":
            raise RuntimeError("Unsupported Store type")

        meta = EdgexMeta(cfg, vdb_file=vdb_file)

        # make these configurable later not now
        # for now always local
        maxcount = 50
        modcount = 10
        dpath = start_gend_obj.pathname() + "/testdata"
        ksize = [1024, 2048, 4096, 8192]

        mdpath = dpath + "/d0"
        if not os.path.exists(mdpath):
            os.makedirs(mdpath)
        for i in range(0, maxcount):
            filename = mdpath +  "/" + "dd" + str(i)
            size_sz = random.choice(ksize)
            chunk = os.urandom(size_sz)
            async with aiofiles.open(filename, mode='wb+') as file_d:
                await file_d.write(chunk)
            file_d.close()

            meta.put(filename, chunk)

            if ((i % modcount) == 0) and (i != 0):
                mdpath = dpath + "/" + "d" + str(i)
                if not os.path.exists(mdpath):
                    os.makedirs(mdpath)
    except Exception as exp:
        logger.exception(exp)



async def s3e_list(cfg, args, session):
    """ command line to do listing """
    if not args or args is None:
        return
    try:
        recursive, edgex_obj = await parse_cmd_1(cfg, args)
        if recursive:
            await cmd_recursive('list', edgex_obj, session)
        else:
            edgex_op = EdgexAccess(edgex_obj)
            list_out = await edgex_op.list(session)
            await cmd_callback('list', edgex_obj, list_out)
    except Exception as exp:
        logger.exception(exp)

async def s3e_exists(cfg, args, session):
    """ command line to check if the object exists """
    if not args or args is None:
        return
    try:
        recursive, edgex_obj = await parse_cmd_1(cfg, args)
        if recursive:
            await cmd_recursive('exists', edgex_obj, session)
        else:
            edgex_op = EdgexAccess(edgex_obj)
            is_there = await edgex_op.exists(session)
            await cmd_callback('exists', edgex_obj, is_there)
    except Exception as exp:
        logger.exception(exp)

async def s3e_delete(cfg, args, session):
    """ commandline to delete the object """
    if not args or args is None:
        return
    try:
        recursive, edgex_obj = await parse_cmd_1(cfg, args)
        if recursive:
            await cmd_recursive('del', edgex_obj, session)
        else:
            edgex_op = EdgexAccess(edgex_obj)
            deleted = await edgex_op.delete(session)
            await cmd_callback('delete', edgex_obj, deleted)
    except Exception as exp:
        logger.exception(exp)

async def s3e_info(cfg, args, session):
    """ commandline to query for the meta info on the object """
    if not args or args is None:
        return
    try:
        recursive, edgex_obj = await parse_cmd_1(cfg, args)
        if recursive:
            await cmd_recursive('info', edgex_obj, session)
        else:
            edgex_op = EdgexAccess(edgex_obj)
            obj_info = await edgex_op.info(session)
            await cmd_callback('info', edgex_obj, obj_info)
    except Exception as exp:
        logger.exception(exp)

async def s3e_get(cfg, args, session):
    """ command line to get an object """
    if not args or args is None:
        return
    try:
        recursive, objs = await parse_cmd_2(cfg, args)
        source_obj = objs[0]
        dest_obj = objs[1]
        source_obj.arg = dest_obj
        if recursive:
            await cmd_recursive('get', source_obj, session)
        else:
            edgex_op = EdgexAccess(source_obj)
            databuf = await edgex_op.get(session)
            await gp_cmd_callback(session, 'get', source_obj, databuf)
    except Exception as exp:
        logger.exception(exp)

async def s3e_put(cfg, args, session):
    """ command line to put the object """
    if not args or args is None:
        return
    try:
        recursive, objs = await parse_cmd_2(cfg, args)
        source_obj = objs[1]
        dest_obj = objs[0]
        source_obj.arg = dest_obj
        if recursive:
            await cmd_recursive('put', source_obj, session)
        else:
            edgex_op = EdgexAccess(source_obj)
            databuf = await edgex_op.get(session)
            await gp_cmd_callback(session, 'put', source_obj, databuf)
    except Exception as exp:
        logger.exception(exp)

async def s3e_meta(cfg, args, session):
    """ command line for meta specific commands """
    if not args:
        print("meta ls | lsdb <dbfile> | deldb <dbfile>")
        return
    cmd = args[0]
    if cmd == "ls":
        print(str(os.listdir(cfg.get_meta_location())))
        return
    elif cmd == "lsdb":
        if len(args) < 2:
            print("meta ls | lsdb <dbfile> | del <dbfile>")
            return
        vdb_file = args[1]
        mdb = EdgexMeta(cfg, vdb_file=vdb_file)
        mdb.show()
    elif cmd == "deldb":
        if len(args) < 2:
            print("meta ls | lsdb <dbfile> | del <dbfile>")
            return
        vdb_file = args[1]
        mdb = EdgexMeta(cfg, vdb_file=vdb_file)
        mdb.deldb()
    else:
        print("Unknown cmd : " + cmd)


def check_entry(cfg, entry, metadb):
    """ check if an entry is in the meta """
    if os.path.isfile(entry):
        meta = EdgexMeta(cfg, vdb_file=metadb)
        hashc = EdgexHash()
        fid = hashc.signature(entry)
        dbentry = meta.get(fid)
        if dbentry is None:
            print(entry + "\tNot found\t" + fid)
        else:
            print(entry + "\tFound\t" + fid)
    elif os.path.isdir(entry):
        lsent = os.listdir(entry)
        for ent in lsent:
            ett = entry + "/" + ent
            check_entry(cfg, ett, metadb)
    else:
        print(entry + "\tUnknown Type")

async def s3e_verify(cfg, args, session):
    """ verify the entries in the directory in the meta """
    if len(args) < 2:
        print("verify <dir> <dbfile>")
        return
    dirname = args[0]
    dbfile = args[1]
    check_entry(cfg, dirname, dbfile)


async def process_command(cmd, args, cfg_file, session):

    valid_cmds = ["exists", "put", "get", "del", "info", "list", "execute", \
                  "wget", "setup", "store", "gend", "meta", "verify"]
    if cmd not in valid_cmds:
        logger.error(str("Unknown command: " + cmd))
        return

    # let's read the the config file first
    if cfg_file is not None:
        async with aiofiles.open(cfg_file, mode='r') as f_l:
            cfg_contents = await f_l.read()
            cfg = EdgexConfig(cfg_contents)

    if cmd == "setup":
        await s3e_setup(cfg, args)
    elif cmd == "store":
        await s3e_store(cfg, args)
    elif cmd == "list":
        await s3e_list(cfg, args, session)
    elif cmd == "get":
        await s3e_get(cfg, args, session)
    elif cmd == "put":
        await s3e_put(cfg, args, session)
    elif cmd == "del":
        await s3e_delete(cfg, args, session)
    elif cmd == "exists":
        await s3e_exists(cfg, args, session)
    elif cmd == "info":
        await s3e_info(cfg, args, session)
    elif cmd == "gend":
        await s3e_gend(cfg, args, session)
    elif cmd == "meta":
        await s3e_meta(cfg, args, session)
    elif cmd == "verify":
        await s3e_verify(cfg, args, session)
    else:
        logger.error("Unknown command")

def usage():
    """ Describe the usage of s3edgex """
    print(sys.argv[0] + " --help")
    print(sys.argv[0] + " --system")
    print(sys.argv[0] + " [ --debug <level> ] <command> <objname> <arg>")
    print("Commands:")
    print("\t\tsetup")
    print("\t\tstore")
    print("\t\tlist")
    print("\t\texists")
    print("\t\tput")
    print("\t\tget")
    print("\t\tdel")
    print("\t\tinfo")
    print("\t\tgend")
    print("\t\tmeta")
    print("\t\tverify")
    print("Examples:")
    print("\t% " + sys.argv[0] + " [ --debug <level> ] setup [ create show ]")
    print("\t% " + sys.argv[0] + " [ --debug <level> ] store [ list add del ]")
    print("\t% " + sys.argv[0] + " [ --debug <level> ] list [ -r ]")
    print("\t% " + sys.argv[0] + " [ --debug <level> ] list [ -r ] <bucketname>")
    print("\t% " + sys.argv[0] + " get [ -l ] \
          <store://bucketname/filename> <filename>")
    print("\t% " + sys.argv[0] + " get [ -r | -l ] \
          <store://bucketname/dirname> <dirname>")
    print("\t% " + sys.argv[0] + " put [ -l ] \
          <store://bucketname/filename> <filename>")
    print("\t% " + sys.argv[0] + " put [ -r | -l ] \
          <store://bucketname/dirname> <dirname>")
    print("\t% " + sys.argv[0] + " del \
          <store://bucketname/filename>")
    print("\t% " + sys.argv[0] + " del [ -r ] \
          <store://bucketname/dirname>")
    print("\t% " + sys.argv[0] + " info <store://bucketname/filename>")
    print("\t% " + sys.argv[0] + " exists <store://bucketname/filename>")
    print("\t% " + sys.argv[0] + " gend -l <dirname>")
    print("\t% " + sys.argv[0] + " meta [ ls | lsdb <dbname> | deldb <dbname> ]")
    print("\t% " + sys.argv[0] + " verify <dirname> <dbname>")


def system_info(debug_level):
    """ Find the system informations details like, python, memory, release \
            versions etc """
    print("python \t\t: " + platform.python_version() + " " \
          + platform.python_implementation() + " " \
          + str(platform.python_build()))
    print("platform \t: " + platform.node() + " " + platform.system() \
          + " " + platform.machine() + " " + platform.release())
    print("uname \t\t: " + platform.uname().version)
    print("debug_level \t: " + str(debug_level))


def main():
    """ the main function to sp3 """
    assert sys.version_info >= (3, 5)
    debug_level = 5

    try:
        opts, remainder = getopt.getopt(sys.argv[1:], "hd:s", ["help", \
                                                               "debug", \
                                                               "system"])
    except getopt.GetoptError:
        usage()
        sys.exit(2)
    for o,a in opts:
        if o in ("-h", "--help"):
            usage()
            sys.exit(2)
        if o in ("-d", "--debug"):
            debug_level = int(a)
        if o in ("-s", "--system"):
            system_info(debug_level)
            sys.exit(0)

    if len(remainder) < 1:
        usage()
        sys.exit(2)

    if debug_level == 0:
        log_format = '%(color)s[%(levelname)1.1s %(asctime)s \
                %(module)s:%(lineno)d]%(end_color)s %(message)s'
        logfile = sys.argv[0] + ".log"
        logzero.logfile(logfile, maxBytes=1048576, backupCount=3, \
                        loglevel=logging.DEBUG, formatter=log_format)
        formatter = logzero.LogFormatter(fmt=log_format)
        logzero.setup_default_logger(level=logging.DEBUG, formatter=formatter)
    else:
        log_format = '%(message)s'
        formatter = logzero.LogFormatter(fmt=log_format)
        logzero.setup_default_logger(level=logging.INFO, formatter=formatter)


    logger.debug(str(sys.argv[0] + " started"))

    cfg_file = expanduser("~") + DEFAULT_CONFIG
    if not os.path.isfile(cfg_file) or not os.access(cfg_file, os.R_OK):
        logger.error(str("Unable to access " + cfg_file))
        sys.exit(2)

    # async code only here onwards
    # ******************************************************************

    loop = asyncio.get_event_loop()
    # session = aiohttp.ClientSession(loop=loop)
    session = aiobotocore.get_session(loop=loop)

    cmd = remainder[0]
    tasks = [asyncio.ensure_future(process_command(cmd, remainder[1:], \
                                                   cfg_file, session))]

    loop.run_until_complete(asyncio.gather(*tasks))
    #loop.run_forever()

    loop.close()
    logger.debug(str(sys.argv[0] + " ended"))

if __name__ == '__main__':
    main()
